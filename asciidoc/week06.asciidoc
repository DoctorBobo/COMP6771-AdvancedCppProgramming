Week 5 tutorial postscript notes
================================
:Author: Christopher Di Bella
:Email: cjdb.ns@gmail.com
:Date: 2016/09/07
:Revision: 1
:cpp: C++

[big]#**WARNING:** these notes are only _partially_ cited. Please do not consider these notes
     reliable until this warning has been removed.#

== Exceptions and error handling
* Designing a program to handle exception safety requires thought.
   ** To quote Herb Sutter, "supporting exceptions should never be an afterthought".

=== Exception safety
* I planned to provide a full set of notes on exception safety and error handling, but David
  Abrahams beat me to it (by over a decade).
* Although they are old, they convey most of the content that I think is relevant.
   - David Abrahams' notes on link:http://www.boost.org/community/exception_safety.html[exception
     safety].
   - David Abrahams' notes on link:http://www.boost.org/community/error_handling.html[error
     handling].
* Before continuing, please take the time to read _both_ articles: I have written the next section
  assuming that you have.

=== Exceptions versus assertions
* Assertions are good to stop developer screw ups.
* That is, they force developers to make sure they are using functions correctly.
   ** An assertion is a hard failure, for non-recoverable errors, with _instant_ program
      termination.
   ** A non-recoverable error should not be in the final software.
* They are _not_ for error handling.
   ** Once code leaves the dev office, they should be disabled.
   ** An example of a good assertion is when self move assignment has been detected (see week 4
      notes for self-assignment and move semantics).
* Exceptions on the other hand are for _recoverable_ errors, such as stopping an invalid range from
  being accessed.
* We roll back the invariants, and perform destruction as necessary.
* Another good example is detecting division by zero in a calculator when a user supplies `1 / 0`:
  this should be recoverable, as we can inform the user of an error and keep processing.
* The CppCoreGuidelines outline two special functions: `Expects` and `Ensures`, which at the moment
  are basically the C assert with different names to convey meaning.

=== `noexcept`
* `noexcept` is a compiler-enforced no-throw guarantee.
* If, under certain conditions, you can assert that a function has a no-throw guarantee, you should
  specify that the function is `noexcept`.
* Destructors are an example of a function that must be unconditionally `noexcept`, as destructors
  should never leak resources (who will clean the resources up when they do?).
   - Any custom `swap` function you write must be `noexcept` as well.
   - Move constructors and move assignment operators should also be unconditionally `noexcept`.
* There are very few operations that actually throw an exception, and if you know that your function
  doesn't perform them, you should assert that your function is `noexcept`.

[source,cpp]
------------
foo::~foo() noexcept; // destructors should always have an unconditional noexcept
foo::foo(foo&& o) noexcept; // as should move constructors/move assignment operators

template <typename T> // conditional noexcept
void swap(T& a, T& b) noexcept(std::is_nothrow_move_constructible<T>::value &&
                               std::is_nothrow_move_assignable<T>::value);
------------

* An unconditional `noexcept` asserts that the no-throw guarantee is held in all cases.
* A conditional `noexcept` means that given the condition inside the parentheses, assert a no-throw
  guarantee. That is, when the conditional `noexcept` is `noexcept(true)`.
* If a function that is specified to be `noexcept` or `noexcept(true)` leaks an exception, then
  `std::terminate` is called immediately.
   ** Unlike `std::exit`, `std::terminate` is not a clean exit from the program.

=== No true `finally`
* Until very recently, {cpp} did not support a `finally` block, because RAII is far more powerful.
* Stroustrup decided to provide one as an ad-hoc (read incomplete) method to shut people up.
* Prefer RAII to a `finally` block, as it better fits the idioms that {cpp} programmers employ and
  expect (and it's also much better, as you never need to close a file, for example).
* If for whatever reason you can't use a resource handle, _then_ use a `final_action` object
  (hopefully the closest {cpp} will ever come to the `finally` block seen in other languages).
   ** If you really do need to use a `final_action` object, you should question the design of the
      program and find out why a destructor is not okay.
   ** Claiming a destructor is "slow" as a reason without performance testing is beyond
      unacceptable, and keep in mind that a `final_action` object will require declaration,
      construction, _and_ destruction in the exact same manner as a normal destructor.
   ** Prefer RAII to `finally`.

=== Throwing exceptions
* Throwing an exception is for handling _exceptional_ circumstances, such as a logic error, a
  runtime error, and so on.
   ** They are not a tool for convenient return or early exit.
* Prefer throwing an exception to returning an error code.
   ** Error codes are often ignored (do you check the return value for `scanf` in C?).
   ** Exceptions cannot be ignored, as an exception that leaks out of main will cause the program
      to terminate.
* Never throw a fundamental type.
* Never throw while you are the direct owner of an object.
   ** In other words, don't throw an exception while you have an _owning_ raw pointer.
   ** See below for more info.
** Stating and enforcing both preconditions and postconditions is a good way to minimise interfacing
   errors.
      ** Look into the GSL's definition of `Expects` and `Ensures` (see references).

=== Catching exceptions
* You should catch exceptions as rarely as possible: exception safety isn't about placing `try` and
  `catch` wherever you can.
* If you rely on RAII, then you _do not_ need to write `try`/`catch` in every situation.
* There is a point where you do need to catch exceptions, but this should be as high up as possible:
  ** The stack unwinding that happens when an exception is thrown will cause destructors to be
     called and resources to be cleaned up along the way.
* When catching an exception, try to catch the exception with as general a class as possible.
   ** I often catch with `std::exception`, which is the most general case for any exception class
      derived from `std::exception`.
   ** Of course, if you need to catch a more specific exception, or your class isn't derived from
      `std::exception` (why not?), then you will need to change this.
   ** Also catch by either reference, or reference-to-`const`:

[source,cpp]
------------
try
{
}
catch (std::exception e) // bad... slicing can happen
{
}

try
{
}
catch (std::exception& e) // okay if you need to modify e
{
}

try
{
}
catch (const std::exception& e) // good as a default
{
}
------------

.References
[TIP]
=====
* Meyers, S. _More effective {cpp}: 35 new ways to improve your programs and designs_. p.XX. 1996.
  Addison Wesley. Westford, MA.
* Meyers, S. _Effective {cpp}: 55 specific ways to improve your programs and designs_.
  Third edition. p.XX. 2005. Pearson Education, Inc. Upper Saddle River, NJ.
* Stroustrup, B. _The {cpp} programming language_. Fourth edition. p.XX. 2013. Pearson
  Education, Inc. Upper Saddle River, NJ.
* Stroustrup, B. _A tour of {cpp}_. p.XX. 2014. Pearson Education, Inc. Upper Saddle River, NJ.
* Stroustrup, B. _Programming: principles and practice using {cpp}_. Second edition. p.XX. 2014.
  Pearson Education, Inc. Upper Saddle River, NJ.
* Sutter, H. _Exceptional {cpp} style: 40 new engineering puzzles, programming problems, and
  solutions_. p.XX. 2005. Pearson Education, Inc. Boston, MA.
* Sutter, H. Alexandrescu, A. _{cpp} coding standards: 101 rules, guidelines, and best practices_.
  p.YY. 2005. Pearson Education, Inc. Upper Saddle River, NJ.
* link:http://www.boost.org/community/exception_safety.html[David Abrahams' exception safety notes]
* link:http://www.boost.org/community/error_handling.html[David Abrahams' error handling notes]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#S-errors[CppCoreGuidelines
  -- E: Error Handling] **this is an important reference to read!**
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ri-expects[CppCoreGuidelines
  -- I.6: Prefer `Expects()` for expressing preconditions]
* https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ri-ensures[CppCoreGuidelines
  -- I.8: Prefer `Ensures()` for expressing postconditions]
* https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gslassert-assertions[CppCoreGuidelines
  -- GSL.assert: Assertions]
* link:http://www.boost.org/doc/libs/1_61_0/libs/exception/doc/motivation.html[Boost Exception]
=====

== Smart pointers
* A smart pointer is some type that behaves as a pointer, but also does something extra.
* Smart pointers are resource _oweners_.
   ** They manage the resource they own.
   ** This often means that they "clean up", or delete their resources once they are no longer used.
* The most common form of smart pointers that you will encounter are:
   ** `std::unique_ptr`
   ** `std::shared_ptr`
   ** `std::weak_ptr`

.References
[TIP]
=====
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rf-ptr[CppCoreGuidelines
  -- F.22: Use `T*` or `owner<T*>` or a smart pointer to designate a single object]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-smart[CppCoreGuidelines
  -- C.149: Use `unique_ptr` or `shared_ptr` to avoid forgetting to `delete` objects created using `new`]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ro-address-of[CppCoreGuidelines
  -- C.166: Overload unary `&` only as part of a system of smart pointers and references]
=====

=== `std::unique_ptr`
* The sole _owner_ of an object.
* *Your default smart pointer*.
* When a `unique_ptr` goes out of scope, the deleter is called, which "cleans up" the resources.
* When correctly used, you should have no memory leaks.
* Usually zero-to-very-little overhead.
* Factories should usually return a `unique_ptr`.
   ** Clients can promote a `unique_ptr` to `shared_ptr`.
   ** It is not possible to transform a `shared_ptr` to a `unique_ptr`.
* Think of the classroom:
   ** The projector is a resource that needs to be allocated (logged on) and deallocated (logged
      off).
   ** The lecturer or tutor is in control of this resource: they are the `unique_ptr`.
   ** When they leave, they log off, and the session is ended.

.References
[TIP]
=====
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-unique[CppCoreGuidelines
  -- R.21: Prefer `unique_ptr` over `shared_ptr` unless you need to share ownership]
=====

==== `std::make_unique`
* Your standard `unique_ptr` allocator.
* No need to use `new`.
* No chance of leaking memory!
* Prefer `make_unique` to raw `new`.

.References
[TIP]
=====
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-make_unique[CppCoreGuidelines
  -- C.150: Use `make_unique()` to construct objects owned by   unique_ptr` s]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-make_unique[CppCoreGuidelines
  -- R.23 Use `make_unique` to make `unique_ptr` s]
=====

==== Custom deleters (advanced)
* Are useful for when you aren't allocating memory via `make_unique`.
* Why would you possibly want to allocate memory otherwise?
* Perhaps you've got a custom allocator, or a custom deleter.
* link:blah[This is a good (practical) example of where a custom deleter is necessary.]
* Notice that the memory is still not allocated via a raw `new`.

=== `std::shared_ptr`
* Used when there are multiple owners of an object. 
* The resource a only released when there are no more owners.
* Think of the classroom:
   - When we are all in the room, we are all using the lights.
   - If the someone leaves the room, it is impolite to turn the lights off while others are still
     in the public room.
   - When the last person leaves, they turn the lights off.
* Shared pointers are expensive: not only do they need to manage the resource that they have been
  asked to manage (like a `unique_ptr`), but they also need to manage a control block for reference
  counting.
   ** The reference counting (increment and decrement) is atomic (for concurrency purposes), so it
      is slower than normal arithmetic operations.
* This control block is how a `shared_ptr` knows if there are multiple owners, or if it is the sole
  owner.
* You need to justify why you need to use a `shared_ptr` over a `unique_ptr`.
* If you use a `shared_ptr` irresponsibly, you can still end up with memory leaks!
   - This is most commonly found when two objects depend on each other.

==== `std::make_shared` and `std::allocate_shared`
* `make_shared` is the common garden variety: it is a specialised version of `allocate_shared`.
* Similar to `make_unique`, except they produce a `shared_ptr` instead.
   ** `allocate_shared` will use a user-specified allocator.
   ** `make_shared` will use the standard allocator.
   ** Prefer `make_shared`
* These functions only perform _one_ allocation, whereas explicitly assigning a `shared_ptr` makes
  two allocations.
* This means that `make_shared` is faster than explicitly allocating your own `shared_ptr`.
* There are only a handful of instances where you shouldn't (or more, can't) use `make_shared`:
   . When you need to provide a custom deleter
   .
   . When the object is extremely large (see xref:weak_ptr-problems[Problems with `weak_ptr` and
     `make_shared`]).

[TIP]
=====
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-make_shared[CppCoreGuidelines
  -- C.151: Use `make_shared()` to construct objects owned by `shared_ptr` s]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-make_shared[CppCoreGuidelines
  -- R.22 Use `make_shared` to make `shared_ptr` s]
=====

=== `std::weak_ptr`
* Is an affiliate of `shared_ptr`.
* Is not actually a pointer: you can't do anything but check that a `shared_ptr` still owns a
  resource.
   ** If there is at least one `shared_ptr` owner, then the `weak_ptr` can create another owner for
      you to use.
* `weak_ptr` is used to break dependency cycles and detect dangling pointers.
* `weak_ptr` has _not_ been designed to replace raw pointers (`T*`, xref:smart-vs-dumb[see below]).
* Use of `weak_ptr` is rare.
* The best way to use a `weak_ptr` is:

[source,cpp]
------------
void foo(const std::size_t i)
{
   if (auto connection = links_[i].lock())
   {
      // connection is a shared_ptr
      // use connection in here
   }
   else
   {
      // connection == nullptr
      // best to erase links_[i] (see below)
   }
}
------------

.References
[TIP]
=====
* Meyers, S. _Effective Modern {cpp} -- 42 ways to improve your use of {cpp}11 and {cpp}14_. p.134
  -- 138. 2014. O'Reilly Media Inc. Sebastopol, CA.
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-weak_ptr[CppCoreGuidelines
  -- R.24: Use `weak_ptr` to break cycles of `shared_ptr` s]
=====

==== <<weak_ptr-problems,Problems with `weak_ptr` and `make_shared`>>
* When a `shared_ptr` is allocated with `make_shared`, it performs one memory allocation for both
  the memory you wish to reserve, and the control block in question.
* That means that the block of memory can't be deallocated unless the control block is also
  deallocated.
* Because this control block keeps a record of the number of `weak_ptr` s that are in circulation,
  we can't deallocate the control block or the object until there are no further `weak_ptr` s.
* Thus, if you maintain a container of `weak_ptr` s, it is a good idea to purge the ones that report
  that they dangle.

.References
[TIP]
=====
* Meyers, S. _Effective Modern {cpp} -- 42 ways to improve your use of {cpp}11 and {cpp}14_. p.139
  -- 147. 2014. O'Reilly Media Inc. Sebastopol, CA.
=====

== <<smart-vs-dumb,Smart pointers versus raw pointers>>
* Smart pointers are great...
   ** ...but they are only for resource _owners_.
* Raw pointers are great...
   ** ...but they are only for resource _observers_.
* You should only store smart pointers.
   - This is opposed to storing raw pointers: if you can avoid manually allocating objects on the
     heap, please do so!
   - Remember that pointers should only be used when you need reference semantics _and_ you want
     to be able to change what you refer to, _or_ if you need a valid "nothing to reference" option.
* Consider the classroom:
   ** The class facilitator is the `unique_ptr`.
   ** They own the projector.
   ** You as students are observers.
   ** You are free to leave the class whenever you please, and your leaving does not affect anybody
      else.
   ** Students are _raw pointers_.
* You should feel free to keep passing raw pointers around and returning raw pointers from
  functions...
   ** ...with a few caveats.
* Herb Sutter has link:https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/[listed
  a few guidelines] about when to choose smart pointers, and when to choose raw pointers: below is a
  summary of his advice.

=== 1. Prefer raw pointers as object parameters to functions
* Raw pointers are not aware of lifetime policies.
   ** If a function doesn't participate in the maintenance of this policy, it doesn't need to take
      a smart pointer.
* Using raw pointers as observers is recommended when you are sure that the object (pointee) will
  outlive the raw pointer.
   ** Copying a `shared_ptr` is expensive, and moving a `unqiue_ptr` too much will make things
      confusing.
* Standard `const` rules still apply.
* Standard reference vs pointer rules still apply.

=== 2. Pass `unique_ptr` by value when the pointee's lifetime ends at the end of the callee function
* Such functions are called sinks.
* RAII and move semantics will make sure that the `unique_ptr` is correctly transferred and
  destroyed when the function returns.

=== 3. Pass `unique_ptr` by reference when you wish to modify the pointer's value, but never pass a `unique_ptr` by reference-to-`const`
* Passing a `unique_ptr` by reference implies that there is potential for the pointer to change
  what it points to.
* Passing a `unique_ptr` by reference-to-`const` offers no additional benefits to passing a raw
  pointer, and actually restricts what can be passed into the function. Recall rule 1.

=== 4. Pass `shared_ptr` by value when you wish for the callee to share ownership with the caller
* The function needs to retain a copy of the `shared_ptr` for shared ownership to be meaningful.

=== 5. Pass `shared_ptr` by reference when you wish to modify the pointer's value
* Same as 3.1
* Accepting a `shared_ptr` as a reference-to-`const` parameter is only acceptable when your
  function calls a function that implements rule 4.
* Otherwise, prefer rule 1.

.References
[TIP]
=====
* link:https://herbsutter.com/2013/05/29/gotw-89-solution-smart-pointers[GotW #89 Solution: Smart
  Pointers]
* link:https://herbsutter.com/2013/05/30/gotw-90-solution-factories[GotW #90 Solution: Factories]
* link:https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters[GotW #91
  Solution: Smart Pointer Parameters]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rf-smart[CppCoreGuidelines
  -- F.7: For general use, take `T*` or `T&` arguments rather than smart pointers]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-owner[CppCoreGuidelines
  -- R.20: Use `unique_ptr` or `shared_ptr` to represent ownership]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-smartptrparam[CppCoreGuidelines
  -- R.30: Take smart pointers as parameters only to explicitly express lifetime semantics]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-smart[CppCoreGuidelines
  -- R.31: If you have non-`std` smart pointers, follow the basic pattern from `std`]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-uniqueptrparam[CppCoreGuidelines
  -- R.32: Take a `unique_ptr<widget>` parameter to express that a function assumes ownership of a `widget`]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-reseat[CppCoreGuidelines
  -- R.33: Take a `unique_ptr<widget>&` parameter to express that a function reseats the `widget`]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-sharedptrparam-owner[CppCoreGuidelines
  -- R.34: Take a `shared_ptr<widget>` parameter to express that a function is part owner]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-sharedptrparam[CppCoreGuidelines
  -- R.35: Take a `shared_ptr<widget>&` parameter to express that a function might reseat the shared pointer]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-sharedptrparam-const[CppCoreGuidelines
  -- R.36: Take a `const shared_ptr<widget>&` parameter to express that it might retain a reference count to the object ???]
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-smartptrget[CppCoreGuidelines
  -- R.37: Do not pass a pointer or reference obtained from an aliased smart pointer]
=====

== `decltype`
* A very powerful type deduction tool.
* `decltype(e)` for some expression `e` will be deduced as the type of the expression `e`.
   - If `e` does not have a valid expression type, your code will not compile.
   - If `e` is the name of an overloaded function, your code will not compile.
* `decltype((e))`, for some _parenthesised_ expression `(e)` does not resolve to the same type as
  `decltype(e)`:
   - If `e` is an lvalue, then `decltype((e))` will be deduced as `decltype(e)&`.
   - If `e` is an rvalue, then `decltype((e))` will be deduced as `decltype(e)&&`.
* [big]#How about in English, professor?#
* The above is a bit technical, so let's break it down:
   - `decltype(e)` takes the type of whatever is inside, and becomes like an unnamed type alias
     (named type aliases were formerly known as a `typedef`).
   - `decltype((e))` takes the type of whatever is inside, and becomes like an unnamed type alias,
     with the caveat that the type is a reference to `e`'s type.
* Why would you want to _ever_ use an unnamed alias?
   - For the same reason you want to use `auto`!
* Relying on type deduction means that you are placing trust in the compiler to work out the correct
  type.
   ** Your explicit type might go out of date.
   ** `decltype(e)` will only go out of date if your expression is _wrong_.
      *** You probably have a bigger problem at that point.
   ** Trust your tool.
* But I can't see my type!
   - Correct, and the minute your type goes off the screen, your type can't be seen anyway.
   - You should keep the scope of variables as small as possible to limit their potential misuse.
   - If you use an IDE, your IDE should be able to deduce the type information on the fly.
   - However, a stronger argument is that `decltype`, like `auto`, helps you code against interfaces;
     explicit types promote coding against implementations.
   - Unlike `auto`, `decltype` isn't supposed to be used everywhere.
* `decltype` doesn't replace `auto` either:
   - `auto` is placed on the left, before the identifier.
   - `decltype` is placed on the right, after the `operator=`.

[source, cpp]
-------------
#include <iostream>
#include <vector>

std::vector<int> make_crowd(int children, int adults, int seniors);

int main()
{
   auto crowd = make_crowd(10, 120, 16);
   // auto on the left, decltype on the right
   auto first_child = decltype(crowd)::value_type{7}; // is the same as...
   auto second_child = std::vector<int>::value_type{7}; // is the same as...
   auto third_child = int{7};
}
-------------

* That seems pointless... why didn't we just use `int{0}`?
* Consider this modification:

[source, cpp]
-------------
#include <iostream>
#include <vector>

// children are often proud of their age, and will happily tell you that they are "six and a half",
// so all children will now give an _exact_ age
std::vector<double> make_crowd(int children, int adults, int seniors);

int main()
{
   auto crowd = make_crowd(10, 120, 16);
   // auto on the left, decltype on the right
   auto first_child = decltype(crowd)::value_type{7};   // is the same as std::vector<double>::value_type{7}; but not the same as...
   auto second_child = std::vector<int>::value_type{7}; // both of which are embedded in our code
   auto third_child = int{7};                           // errors are likely to crop up
}
-------------

* So should I be using `decltype` like in this program?

[source,cpp]
------------
auto i = decltype(0){0};
auto j = decltype(i){1};
------------

* Heavens, no! Use `decltype` when you require type that is dependent on some expression.
* An example is the `value_type` above: it is dependent on a container.
* We can also use `decltype` to deduce the return type of complex types.
   ** One of these will feature in the `template class` notes.
