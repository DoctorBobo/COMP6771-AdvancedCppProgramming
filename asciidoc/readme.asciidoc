COMP6771 Advanced C++ Programming tutorial postscripts
======================================================
:Author: Christopher Di Bella
:Email: cjdb.ns@gmail.com
:Date: 2016/08/03
:Revision: 1
:cpp: C++

== What are these?
* These are tutorial postscript notes for anyone enrolled in COMP6771.
* They are derived from tutorials `mon16a`, `tue16a`, and `tue17a`.
* From a course perspective, these notes will be largely incomplete.
* If I'm unhappy with something I've said in a tutorial, or I think of a really cool thing
  afterward, it'll appear here.
* Tutorial solutions will not appear here.
* They are not designed to replace:
   - the textbook
   - lecture attendance
   - lecture slides/notes
   - tutorial questions
   - tutorial attendance
   - hard work and study
* Skipping any of the above because you find these notes helpful will probably cause you to do very
  poorly in the course.
* They are supplementary to the tutorials, and can be used as catch-up if you miss one tutorial, but
  not if you pathologically skip them.

== Contact
* You can contact me at {Email}.
* Please put your subject as "COMP6771 -- <subject>". I get asked a lot of {cpp} questions, and I need
  to prioritise _your_ questions over the general public's.
* Please email staff as soon as you have a question so that you don't forget to ask.
* There is also an official course forum at http://www.cse.unsw.edu.au/~cs6771.
* Please use this to ask questions that might benefit the class over both email (personal stuff exempt)
  and any Facbook groups.

== Tutorial attendance
* Not compulsory.
* We like to keep attendance for book-keeping purposes.
   * This will help us determine the correlation between attendance and marks.
* Except in **grievous circumstances**, poor tutorial attendance is likely to hurt your chances for
  an extension.
* Bjarne Stroustrup, the original creator of {cpp} strongly recommends that {cpp} beginners invest 15+
  hours per week into learning about {cpp}.
* Four of these hours have been reserved for you in the form of lectures and tutorials.
* Please take advantage of this!

== {cpp}11 and {cpp}14
* {cpp}11 was a major change for {cpp}.
* {cpp}14 is essentially a finished version of {cpp}11, and is only a minor change
* Some students are concerned about the textbook only containing {cpp}11 material, and the
  examinable content.
* Jingling has told me this:

"I made a brief comment in the course outline. {cpp}14 is a small improvement over {cpp}11 with minor
features introduced. You can tell students that the exam will focus on the core of {cpp}."

== Feedback
* link:https://www.quora.com/Why-do-a-lot-of-people-seem-to-dislike-C%2B%2B/answer/Christopher-Di-Bella?srid=CbmP[One reason people dislike {cpp}] is because they have a bad experience with it.
* Another reason is because they haven't been properly educated on {cpp}.
* If you find yourself struggling in this course, please ask for help.
* You pay the university a lot of money to take this course, and if it isn't working for you, you
  have the right to let us know.
* Perhaps we can alter our teaching style a little, or find a new reference so that you can learn
  better.
* We know a lot about {cpp}, but we don't know everything about {cpp} at all times.
* There's a lot of {cpp} that I can easily look up, but don't care about in my day-to-day
  programming. Some of it is just for compiler developers/library writers.
* We might occasionally make mistakes. If you spot one, please point it out.

== References and plagiarism
* I am against any form of academic misconduct.
* I tow a very hard line on plagiarism.
* I do my best to provide citations, or acknowledge authors wherever possible.
* I might slip up in these notes: if you spot something, please let me know, as the referenced
  source will often provide more insight than I can afford to in a summary.

== Resources
[CAUTION]
=========
* Most {cpp} resources are _abhorrently_ written.
* If you are after a {cpp} book, please confirm that it is on the peer-reviewed StackOverflow
  link:http://bit.ly/1hOS1iB[Definitive Book Guide and List].
* All of the resources below are on this list.
=========
=== Books
* The official course textbook is link:http://amzn.to/2asmqFr[C++ Primer (5th Edition)].
* Tips for further reading will not reference the course textbook, as you should be reading it
  throughout the course.
* I strongly recommend that _all students_ purchase a copy of link:http://amzn.to/2au6ArE[A Tour of {cpp}].
  This book is written by Stroustrup, and is only 200 pages long (you can literally read it in an
  afternoon). It presents you with an extremely high overview of {cpp} that will make diving into
  lectures, tutorials, and assignments much easier. I recommend that you read this book once before
  each assignment and once again before the exam.
* I also recommend Stroustrup's beginner textbook,
  link:http://amzn.to/2aB2G1H[Programming: Principles and Practice Using {cpp} (2nd Edition)].
* If you are after a {cpp} reference book, Stroustrup has written
  link:http://amzn.to/2ahE2Xo[The {cpp} Programming Langauge (4th Edition)].
* If you'd like to improve your programming style, Scott Meyers has published four books on good
  {cpp} style. The first three are pre-{cpp}11, but are still _extremely_ relevant for all {cpp} programmers:
  many of the points helped to form the CppCoreGuidelines (see below)
     - link:https://www.amazon.com/Effective-Specific-Improve-Programs-Designs/dp/0321334876/ref=sr_1_2?ie=UTF8&qid=1470533552&sr=8-2&keywords=effective+c%2B%2B[Effective {cpp} (Third Edition)]
     - link:https://www.amazon.com/More-Effective-Improve-Programs-Designs/dp/020163371X/ref=pd_sim_14_3?ie=UTF8&dpID=51xXovPFsDL&dpSrc=sims&preST=_AC_UL160_SR128%2C160_&psc=1&refRID=GF8PDAM3VFJJQEWFZBDA[More Effective {cpp}]
     - link:https://www.amazon.com/Effective-STL-Specific-Standard-Template/dp/0201749629/ref=pd_bxgy_14_img_3?ie=UTF8&psc=1&refRID=6CQX0RV3SGF5A4SNCZ3J[Effective STL]
     - link:https://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996/ref=pd_bxgy_14_img_3?ie=UTF8&psc=1&refRID=AEVKSJ410BRR4TZTD4QK[Effective Modern {cpp}]
* Herb Sutter's four books are also very good. Like Meyers' original trilogy, they are written with {cpp}98 in
  mind, but are of high quality, even today.
     - link:https://www.amazon.com/Exceptional-Engineering-Programming-Problems-Solutions/dp/0201615622/ref=sr_1_1?s=books&ie=UTF8&qid=1470533626&sr=1-1&keywords=exceptional+c%2B%2B[Exceptional {cpp}]
     - link:https://www.amazon.com/More-Exceptional-Engineering-Programming-Solutions/dp/020170434X/ref=pd_bxgy_14_img_2?ie=UTF8&psc=1&refRID=HJPPJ82DVSRXDTTZMNQG[More Exceptional {cpp}]
     - link:https://www.amazon.com/Exceptional-Style-Engineering-Programming-Solutions/dp/0201760428/ref=pd_bxgy_14_img_3?ie=UTF8&psc=1&refRID=7WPVNM7VB3TT32WY1BGE[Exceptional {cpp} Style]
     - link:https://www.amazon.com/Coding-Standards-Rules-Guidelines-Practices/dp/0321113586/ref=pd_sim_14_4?ie=UTF8&dpID=51SHzgmnCUL&dpSrc=sims&preST=_AC_UL160_SR129%2C160_&psc=1&refRID=2YM247F81BYEV4QF1GH9][{cpp} Coding Standards] (co-authored with Andrei Alexandrescu) 

[TIP]
=====
* I am a fan of works by Bjarne Stroustrup, Herb Sutter, Scott Meyers, Anthony Williams, and Sergey
  Zubkov.
* Bjarne Stroustrup is the original creator of {cpp}. He is a senior member of WG21.
* Herb Sutter is a very senior member of the {cpp} community, and is the convener for WG21.
* Scott Meyers was a senior member of the {cpp} community, but chose to retire from {cpp} in 2015.
  He is directly responsible for the programming style of a large portion of the {cpp} community.
* Anthony Williams is a concurrency expert and a senior member of the {cpp} community.
* Sergey Zubkov is a senior member of the {cpp} community, and also works directly with Stroustrup.
  He is a member of WG21, and is a _major_ contributor to en.cppreference.com (see below). He also
  has a link:https://www.quora.com/profile/Sergey-Zubkov-1[Quora.com] profile with 800+ answers in
  {cpp} alone.

* WG21 is the name of the team of people that ultimately decide what features go into the next
  version of {cpp}. WG stands for 'Working Group'.
* SG14 is a Study Group underneath WG21, led by Michael Wong, concerned with {cpp} for games and
  finance. I am a passive member of SG14 at present.
=====

=== Websites
* link:http://en.cppreference.com[en.cppreference.com] -- the best online {cpp} reference you can find.
* link:http://isocpp.org[The official ISO {cpp} homepage]
* link:http://isocpp.org/faq[A combination of Stroustrup's original FAQ and another popular FAQ]
* link:http://stroustrup.com/[Stroustrup's Homepage]
* http://stroustrup.com/bs_faq.html
* http://stroustrup.com/bs_faq2.html
* link:http://stroustrup.com/C++11FAQ.html[Stroustrup's FAQ for {cpp}11]
* link:https://herbsutter.com/[Herb Sutter's homepage]
* link:https://herbsutter.com/gotw/[Sutter's problems page] (very insightful, and laid the
  foundations for his excellent book series).
* link:http://stackoverflow.com/questions/tagged/c%2b%2b-faq?sort=votes[StackOverflow {cpp} FAQ]
* link:http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list[The Definitive {cpp} Book Guide and List]
* link:https://www.quora.com/profile/Sergey-Zubkov-1[Sergey Zubkov's Quora.com profile]
* link:https://www.quora.com/profile/Christopher-Di-Bella[My Quora.com profile] (yes, I'm tooting
  my own horn a bit here, but you might find it useful)

=== Style guides
* There is no course-endorsed C++ style guide.
* My personal favourite is the link:http://bit.ly/1YnLJv7[CppCoreGuidelines].
* Our tutorials will reference these guidelines a _lot_.
* The guidelines were started by Stroustrup and Sutter, and many extremely senior {cpp} programmers
  contribute to these guidelines.
* I am not a fan of the Google {cpp} Style Guide. It is highly restrictive, and limits the potential
  of {cpp} to something similar of a C-subset or Java-subset of {cpp}.
* The GSG enforces hard-and-fast rules.
* This course fouces on good style, but doesn't enforce many hard-and-fast rules, as there is often
  an exception to every hard-and-fast rule.

