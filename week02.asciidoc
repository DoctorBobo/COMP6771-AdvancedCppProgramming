COMP6771 Advanced C++ Programming week 2 tutorial notes
=======================================================
:Author: Christopher Di Bella
:Email: cjdb.ns@gmail.com
:Date: 2016/08/03
:Revision: 1
:cpp: C++

=== {cpp} is not _C with Classes_.
* It is much more than _C with Classes_, as you will learn throughout the course.
* You cannot think of {cpp} as a superset of C.
* Many C programs do not compile with a {cpp} compiler.
* Some C programs that do compile with a {cpp} compiler will give you different output to when they
  are compiled on a C compiler, despite being identical source!

.Further reading
[TIP]
=====
* Stroustrup, B. _The design and evolution of C++_. 1994. Pearson Education, Inc. Laffin, PA.
* link:https://www.quora.com/Can-we-say-C%2B%2B-is-super-set-of-C/answer/Sergey-Zubkov-1?srid=CbmP[Can we say that "{cpp} is a superset of C"?]
* link:https://www.quora.com/Can-C%2B%2B-do-everything-that-C-can/answers/14784108?srid=CbmP[Can {cpp} do everything that C can?]
=====

=== {cpp} is not _Java with low level stuff_
* link:http://stroustrup.com/bs_faq.html#Java[See Stroustrup's answer on this.]
* Don't try to program {cpp} in the same style as Java: you will do very poorly in this course.
* You will also never take advantage of {cpp}'s potential.

=== `main`
* _Must_ adhere to one of these forms:
[source,cpp]
------------
int main() { }
int main(int argc, char* argv[]) { }
int main(int argc, char* argv[], /* other parameters */) { }
------------

* Return type must be `int`. Everything else should be rejected by the compiler, as it is _not_ a {cpp}
  program.
* You cannot call `main`.
* `main` cannot be `static`, `inline`, or `constexpr`.

[TIP]
=====
`main` is a special function that does not require a `return` statement.
If your program reaches the end of `main` and doesn't execute a `return` statement, it implicitly
returns 0.

I liken this to a POSIX program: if there isn't a problem, no need to signal anything; if there _is_
a problem, then return a non-zero value.
=====

Reference: http://en.cppreference.com/w/cpp/language/main_function

=== Types
* A declaration is like an announcement to the compiler, saying "this exists!"
* A definition is actually telling the compiler about the object/function/type
* Prefer to use `{}` over `=` when initialising things. For example:
[source,cpp]
------------
int foo{ 10 };    // do this
int bar = 10;     // don't do this
int fizz = 10.5;  // fizz is actually 10
int buzz{ 10.5 }; // compiler error: trying to put a double in an int
------------

* Better yet, use `auto` on the left-hand-side. Then you just need to worry about the
  right-hand-side.
* You _need_ to use `=` with `auto`, and you _need_ to initialise your variables.
[source,cpp]
------------
auto foo = 10;   // foo is an int
auto bar = 10.5; // bar is a double
auto fizz = 10U; // fizz is an unsigned int
auto buzz;       // error: you forgot to initialise your variable
------------

.Further reading
[TIP]
=====
* https://herbsutter.com/2013/06/07/gotw-92-solution-auto-variables-part-1/
* https://herbsutter.com/2013/06/13/gotw-93-solution-auto-variables-part-2/
* https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/
* https://www.youtube.com/watch?v=xnqTKD8uD64&feature=youtu.be&t=28m24s
* Stroustrup, B. _A tour of {cpp}_. p5 -- 9. 2014. Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _Programming: principles and practice using {cpp}_ 2nd Edition. p59 -- 87. 2014.
  Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _The {cpp} programming language_ 4th Edition. p135 -- 169. 2013. Pearson Education
  Inc. Upper Saddle River, NJ.
* Meyers, S. _Effective modern {cpp} -- 42 ways to improve your use of {cpp}11 and {cpp}14_. p48
  -- 57. 2014. O'Reilly Media Inc. Sebastopol, CA. 
=====

==== References
* A reference is an alias for an object.
* If you assign a value to a reference, you're in fact assigning it to the object it refers to.
* You can't change what a reference refers to. It refers to what it is initialised with.
* We do this to create a reference:
[source,cpp]
------------
auto foo = 10;
auto bar& = foo;

std::cout << foo << ' ' << bar << '\n';
++foo;
std::cout << foo << ' ' << bar << '\n';
++bar;
std::cout << foo << ' ' << bar << '\n';
------------

* A `const` reference refers to an object whose value can't be changed.
* By putting the `const` there, you are promising that you won't modify the referred object via the
  reference (but you can via other means).
[source,cpp]
------------
auto foo = 10;
const auto& bar = foo;

std::cout << foo << ' ' << bar << '\n';
foo = 20;
std::cout << foo << ' ' << bar << '\n';
bar = 300; // error: can't write to a const reference.
------------

.Further reading
[TIP]
====
* Stroustrup, B. _A tour of {cpp}_. p9 -- 14. 2014. Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _Programming: principles and practice using {cpp}_. 2nd Edition. p276 -- 284. 2014.
  Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _The {cpp} programming language_ 4th Edition. p190 -- 193. 2013. Pearson Education
  Inc. Upper Saddle River, NJ.
* Meyers, S. _More effective {cpp}: 35 new ways to improve your programs and designs_. p9 -- 11. 1996.
  Addison-Wesley. Westford, MA.
====

==== Pointers
* A pointer is an object that 'points' to another object.
* A pointer is like a reference, but you can change what it points to.
* `nullptr` means that the pointer doesn't point to anything.
* Prefer references unless you need to change what is being referred to, or you need a `nullptr`.
* When you want to access the object that is being referred to, we dereference the pointer.
* Dereferencing a `nullptr` is undefined behaviour.
* When assigning a pointer, you need to make sure that the types match up.
[source,cpp]
------------
auto* foo = nullptr; // this isn't pointing to anything.
auto pi = 3.1415;
foo = &pi; // foo now points to pi's location in memory

std::cout << foo << ' ' << pi << '\n'; // prints out foo's location in memory
std::cout << *foo << ' ' << pi << '\n'; // *foo is the same as pi, and is like a reference.
*foo = 3.141592; // changing pi through foo
std::cout << foo << ' ' << pi << '\n';
std::cout << *foo << ' ' << pi << '\n';

auto bar e = 2.8;
foo = &e; // foo now points to e's memory location and has nothing to do with pi
std::cout << foo << ' ' << e << ' ' << pi << '\n';
std::cout << *foo << ' ' << e << ' ' << pi <<'\n';
------------

* There's two types of pointer: `const` pointers, and pointer to `const`.
* A `const` pointer is a pointer that can only point to one thing, like a reference can only
  reference one thing.
* A pointer to `const` is a pointer that can point to anything at any time, but you can't change the
  value that is pointed to when you dereference the pointer.
[source,cpp]
------------
auto pi = 3.14;
auto* const foo = &pi;
*foo = 3.1415; // ok
foo = nullptr; // error: foo is a const pointer and cannot be changed

const auto* bar = &pi; // bar is the pointer, pi is the pointee
*bar = 3.141592; // error: bar is a pointer-to-const, so you cannot change the pointee
bar = nullptr; // ok

const auto* const fizz = &pi;
*fizz = 3.141592; // error: fizz is a pointer-to-const, so you cannot change the pointee
fizz = nullptr; // error: fizz is a const pointer and cannot be changed
------------

.Further reading
[TIP]
=====
* Stroustrup, B. _A tour of {cpp}_. p9 -- 14. 2014. Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _Programming: principles and practice using {cpp}_. 2nd Edition. p591 -- 600.
  Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _The {cpp} programming language_ 4th Edition. p171 -- 174, 186 -- 188, 196 -- 199.
  Pearson Education Inc. Upper Saddle River, NJ.
* Meyers, S. _More effective {cpp}: 35 new ways to improve your programs and designs_. p9 -- 11. 1996.
  Addison-Wesley. Westford, MA.
* Lots of the
  link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md[CppCoreGuidelines]
=====

=== Streams
* `<<` is the put-to operator, and is associated with output.
* `>>` is the get-from operator, and is associated with input.

==== `iostream`
* `cout` is the character output stream.
* `cerr` is the character error stream.

[CAUTION]
=========
* Many students asked why I choose to use `'\n'` over `endl` in tutorials.
* They pointed out that `endl` is a platform-independent version of `'\n'`, and becomes `"\r\n"` on
  Windows systems, and `'\n'` on Unix systems such as Linux.
* Many textbooks and online sources state this, but it is a red herring (myth, etc.).
* `endl` does two things: it puts `'\n'` to the output/error stream, and then flushes the buffer.
* This means that other than flushing the stream, it is literally no different to using `'\n'`.
* Flushing a buffer is slow, so your program might suffer a performance hit.
* If you're sceptical, take a look through any of the textbooks I mentioned above, or any of the
  references below.
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#slio50-avoid-endl[The CppCoreGuidelines recommend against using `endl`] unless you _need_ to print `'\n'` and then
  flush the buffer.
* Provided that you understand the first five points, it is not a hard-and-fast rule, but my
  recommendation, based off programmers such as Stroustrup, Sutter, Zubkov, etc.
* The following code examples all do exactly the same thing on _every_ system.
[source,cpp]
------------
// example 1
std::cout << "Hello, world!" << std::endl;

// example 2
std::cout << "Hello, world!\n" << std::flush;

// example 3
std::cout << "Hello, world!\n";
std::cout.flush();

// example 4
std::cout << "Hello, world!";
std::cout.put('\n');
std::cout.flush();
------------
=========

* `cin` is the character input stream.

[CAUTION]
=========
* When getting input from `cin`, you need to check whether or not the input is properly formatted.
* Compile and run the the program below, and try entering the input `a 12345`:

[source,cpp]
------------
#include <iostream>

int main()
{
   std::cout << "Enter two unsigned ints:\n";
   auto a = 0U;
   auto b = 0U;
   std::cin >> a >> b;
   std::cout << "a == " << a << "; b == " << b << '\n';
}
------------

* Because you didn't check that the input was good, your program didn't know what to do.
* The results are probably _very_ interesting.
* Now do the same thing with this program:
[source,cpp]
------------
#include <iostream>
#include <limits>

int main()
{
   std::cout << "Enter two unsigned ints:\n";
   auto a = 0U;
   auto b = 0U;

   // keep trying to get input until the correct type of input is put in
   while (!(std::cin >> a >> b))
   {
      std::cerr << "Whoops! Please enter two whole numbers >= 0.\n";
      std::cout << "Enter two unsigned ints:\n";

      // clear the error flags
      std::cin.clear();

      // ignore everything until the first new line in the buffer
      std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
   }

   std::cout << "a == " << a << "; b == " << b << '\n';
}
------------
=========

.Further reading
[TIP]
=====
* Working Draft, Standard for Programming Language {cpp}, p.1051 (final {cpp}14 draft)
* Stroustrup, B. _Programming: principles and practice using {cpp}_. 2nd Edition. p345 -- 410. 2014.
  Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _The {cpp} programming language_ 4th Edition. p1073 -- 1108. 2013. Pearson
  Education Inc. Upper Saddle River, NJ.
* link:https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#slio50-avoid-endl[CppCoreGuidelines: Avoid `endl`]
* link:https://www.quora.com/Why-is-endl-preferred-over-n-sequence-in-C%2B%2B/answer/Sergey-Zubkov-1?srid=CbmP&share=527eb8ca[Sergey Zubkov's answer to "Why is `endl` preferred over `'\n'` sequence?" -- Quora.com]
* link:https://www.youtube.com/watch?v=GMqQOEZYVJQ[{cpp} Weekly ep 7: Stop using `std::endl`]
* link:http://en.cppreference.com/w/cpp/io/manip/endl[en.cppreference.com on `endl`]
* link:http://stackoverflow.com/questions/213907/c-stdendl-vs-n[C++ "`std::endl`" vs `'\n'` -- StackOverflow]
=====

==== `fstream`
* `ofstream` is for file output.
* `ifstream` is for file input.
* `fstream` is for file input and file output on the _same_ file at the _same_ time. Don't use this
  unless you need to perform both input and output on the same file.
   - Anything applicable to `ifstream` is also applicable to `fstream`
   - Anything applicable to `ofstream` is also applicable to `fstream`
* Using file streams is the same as when you use `cout` and `cin`.
[CAUTION]
=========
* Many sources incorrectly inform you to use `ifstream::eof` when reading in from file.
* `eof` is just an indicator
* This is the correct way to handle file input:
[source,cpp]
------------
#include <iostream>
#include <fstream>

int main()
{
   auto infile = std::ifstream{ "foo" };
   if (!infile)
   {
      std::cerr << "File opening failed\n";
      return 1;
   }

   // we use a for-statement, because we don't need to use the variable `a`
   // after we finish reading in the file!
   for (auto a = 0; infile >> a; )
      std::cout << a << '\n';

   if (infile.eof())
   {
      std::cout << "End of file reached successfully\n";
   }
   else if (infile.bad())
   {
      std::cerr << "I/O error while reading\n";
      return 2;
   }
   else if (infile.fail())
   {
      std::cerr << "Non-integer data encountered\n";
      return 3;
   }
}
------------

.Reference
****
* Author: Sergey Zubkov
* Website: Quora.com
* Source: https://www.quora.com/What-is-the-the-function-of-eof-in-c%2B%2B/answer/Sergey-Zubkov-1?srid=CbmP
* I modified the code to suit the style of code I recommend. This is a demonstration of what _verbatim
  plagiarism_ looks like.
* **Do not plagiarise others' work.**
****
=========

=== RAII
* Notice how Sergey didn't close the file, and I didn't bother to add it in for him to suit our
  style.
* This caused a bit of concern in the tutorials.
* This is an example of Resource Acquisition is Initialisation (RAII for short).
* RAII is essentially an object cleaning up after itself when you are finished with it.
* "Finished" means the object has been destroyed:
   - The end of the expression for a temporary (an object without a name, such as a string literal)
   - A local variable gone out of scope
   - Deleting (freeing) an object on the heap
   - Leaving the program (for `static` varaibles)
   - We will cover object lifetime throughout the course, so don't panic if you don't get it yet.
   - Source: http://en.cppreference.com/w/cpp/language/lifetime
* RAII is not like garbage collection
   - RAII is a programming _idiom_; garbage collection is a fire-and-forget tool.
   - RAII requires you to allocate resources and clean up after yourself
   - When using RAII correctly, you are guaranteed to have the clean up when the object is
     destroyed. Garbage collection makes no such guarantee.
   - Source 1: http://en.cppreference.com/w/cpp/language/raii
   - Source 2: http://stackoverflow.com/questions/8712666/when-has-raii-an-advantage-over-gc
* When the `ifstream` object goes out of scope, the file will automatically be closed.
* A file open with `ofstream` will flush the stream and then close. There is rarely a need to
  manually flush before closing.
* If you're uncomfortable about the above, you can consider this program instead:
[source,cpp]
------------
#include <iostream>
#include <fstream>

int main()
{
   if (auto infile = std::ifstream{ "foo" })
   {
      for (auto a = 0; infile >> a; )
         std::cout << a << '\n';

      if (infile.eof())
      {
         std::cout << "End of file reached successfully\n";
      }
      else if (infile.bad())
      {
         std::cerr << "I/O error while reading\n";
         return 2;
      }
      else if (infile.fail())
      {
         std::cerr << "Non-integer data encountered\n";
         return 3;
      }
   }
   else
   {
      std::cerr << "File opening failed\n";
      return 1;
   } // file closed here, where the if-statement is finished.
}
------------

.Reference
[CAUTION]
=========
* Author: Sergey Zubkov
* Website: Quora.com
* Source: https://www.quora.com/What-is-the-the-function-of-eof-in-c%2B%2B/answer/Sergey-Zubkov-1?srid=CbmP
* I modified the code to suit the style I'm recommending. This is a demonstration of what _derived
  plagiarism_ looks like.
* **Do not do plagiarise others' work.**
=========

* I actually recommend this one. The original example was just for motivation about RAII.
* When we get to the end of the outer `if`-statement, the file is automatically closed.
* We generally like to keep objects as local as possible, which is why we've used a `for`-loop
  instead of a `while`-loop.

.Further reading
[TIP]
=====
* Stroustrup, B. _A tour of {cpp}_. p85 -- 94. 2014. Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _Programming: principles and practice using {cpp}_. 2nd Edition. p345 -- 410. 2014.
  Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _The {cpp} programming language_ 4th Edition. p112, 354 -- 357, 1073 -- 1108. 2013.
  Pearson Education Inc. Upper Saddle River, NJ.
* Meyers, S. _Effective {cpp}: 55 specific ways to improve your programs and designs_.
  Third edition. p61 -- 69. 2005. Pearson Education, Inc. Upper Saddle River, NJ.
=====

=== `sstream`
* `istringstream` is for converting values in text to types (e.g. `"42"` to `42`)
* `ostringstream` is for converting objects to values in strings (e.g. `42` to `"42"`)
* `stringstream` is for both `istringstream` operations and `ostringstream` operations.
* The same rules apply to the `sstream` objects as `iostream` and `fstream` objects.

.Further reading
[TIP]
=====
* Stroustrup, B. _A tour of {cpp}_. p85 -- 94. 2014. Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _Programming: principles and practice using {cpp}_. 2nd Edition. p345 -- 410. 2014.
  Pearson Education Inc. Upper Saddle River, NJ.
* Stroustrup, B. _The {cpp} programming language_ 4th Edition. p1073 -- 1108. 2013. Pearson
  Education Inc. Upper Saddle River, NJ.
=====
